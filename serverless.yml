service: ecommerce-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  profile: chris
  region: us-east-1
  memorySize: 128

  #Setting variables for CI/CD pipeline.
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PASS: ${env:REDIS_PASS}
    REDIS_PORT: ${env:REDIS_PORT}
    REDIS_ACTIVE: ${env:REDIS_ACTIVE}
    REDIS_TTL: ${env:REDIS_TTL}
    JWT_KEY: ${env:JWT_KEY}
    JWT_EXPIRES: ${env:JWT_EXPIRES}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

package:
  patterns:
    - '!node_modules/.prisma/client/query-engine-*'
    - 'node_modules/.prisma/client/query-engine-rhel-*'

functions:

  auth:
    handler: src/controllers/authController.auth

  getUsers:
    handler: src/controllers/userHandler.getUsers
    description: Get all users
    events: 
      - http: 
          path: /users
          method: GET
          cors: true
          authorizer: auth

  getUserById:
    handler: src/controllers/userHandler.getUserById
    description: Get user by id
    events: 
      - http: 
          path: /users/{id}
          method: GET
          cors: true
          authorizer: auth
        
  createUser:
    handler: src/controllers/userHandler.createUser
    description: Create users
    events: 
      - http: 
          path: /users
          method: POST
          cors: true

  login:
    handler: src/controllers/userHandler.login
    description: Login
    events: 
      - http: 
          path: /login
          method: POST
          cors: true

  updateUser:
    handler: src/controllers/userHandler.updateUser
    description: Update User
    events: 
      - http: 
          path: /users/{id}
          method: PUT
          cors: true
          authorizer: auth
  
  deleteUser:
    handler: src/controllers/userHandler.deleteUser
    description: Delete User
    events: 
      - http: 
          path: /users/{id}
          method: DELETE
          cors: true
          authorizer: auth

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'